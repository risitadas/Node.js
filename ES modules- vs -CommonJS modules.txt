Differences between ES modules and CommonJS


1. No require, exports or module.exports

in most cases, the ES module import can be used to load CommonJS modules, 
if needed, a require function can be constructed within an ES module using module.createRequire()

2. No __filename or __dirname

these CommonJS variables are not available in ES modules,
__filename and __dirname use cases can be replicated via import.meta.url
 
3. No Native Module Loading

native modules are not currently supported with ES module imports,
they can instead be loaded with module.createRequire() or process.dlopen.

4. No require.resolve

relative resolution can be handled via new URL('./local', import.meta.url).,
for a complete require.resolve replacement, there is a flagged experimental import.meta.resolve API ,
alternatively module.createRequire() can be used

5. No NODE_PATH

NODE_PATH is not part of resolving import specifiers,
please use symlinks if this behavior is desired

6. No require.extensions

require.extensions is not used by import,
the expectation is that loader hooks can provide this workflow in the future

7. No require.cache

require.cache is not used by import as the ES module loader has its own separate cache
